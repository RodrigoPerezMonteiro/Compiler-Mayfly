//
// **** AUTOMATICALLY GENERATED BY mknodedecls.pl -- DO NOT EDIT ****
//
#ifdef __NODE_DECLARATIONS_ONLY__

//---------------------------------------------------------------------------
//     THESE ARE PREDEFINED NODES, AVAILABLE FROM THE CDK
//---------------------------------------------------------------------------

namespace cdk {
  namespace node {
    class Node;  class Nil;  class Data;  class Composite;  class Sequence;
    namespace expression {
      template <class T> class Simple;
      class Double;  class Integer;  class String;  class Identifier;
      class UnaryExpression;
      class NEG;
      class BinaryExpression;
      class ADD;  class SUB;  class MUL;  class DIV;  class MOD;
      class LT;   class LE;   class GE;   class GT;   class EQ;   class NE;
    }
  } // namespace node
} // namespace cdk

//---------------------------------------------------------------------------
//     THESE ARE THE NODES DEFINED SPECIFICALLY FOR THIS APPLICATION
//---------------------------------------------------------------------------

namespace mayfly {
namespace node { class ForNodeDec; } 
namespace node { class BreakNode; } 
namespace node { class ContinueNode; } 
namespace node { class FunctionDefineNode; } 
namespace node { class IfElseNode; } 
namespace node { class DoWhileNode; } 
namespace node { class PrintNode; } 
namespace node { class QualifierNode; } 
namespace node { class VarDeclareNode; } 
namespace node { class ForNodeInc; } 
namespace node { class ReturnNode; } 
namespace node { namespace expression { class FunctionCallNode; } } 
namespace node { namespace expression { class Invocation; } } 
namespace node { namespace expression { class LeftValue; } } 
namespace node { namespace expression { class VectorNode; } } 
namespace node { namespace expression { class DEC; } } 
namespace node { namespace expression { class AssignmentNode; } } 
namespace node { namespace expression { class NOT; } } 
namespace node { namespace expression { class LeftValueAsterisco; } } 
namespace node { namespace expression { class AND; } } 
namespace node { namespace expression { class MemAloc; } } 
namespace node { namespace expression { class ReferenceNode; } } 
namespace node { namespace expression { class INC; } } 
namespace node { namespace expression { class OR; } } 
namespace node { namespace expression { class Index; } } 
namespace node { namespace expression { class ReadNode; } } 
namespace node { class IfNode; } 
namespace node { class FunctionDeclareNode; } 
namespace node { class BlockNode; } 
namespace node { class VarDefineNode; } 
} // namespace mayfly

//---------------------------------------------------------------------------
//     A L I A S E S
//---------------------------------------------------------------------------

// make sure the "semantics" namespace is known
namespace mayfly { namespace semantics {} }

#else /* !defined(__NODE_DECLARATIONS_ONLY__) */

#ifndef __AUTOMATIC_NODE_ALLNODES_H__
#define __AUTOMATIC_NODE_ALLNODES_H__

//---------------------------------------------------------------------------
//     THESE ARE PREDEFINED NODES, AVAILABLE FROM THE CDK
//---------------------------------------------------------------------------

#include <cdk/nodes/Node.h>
#include <cdk/nodes/Data.h>
#include <cdk/nodes/Nil.h>
#include <cdk/nodes/Composite.h>
#include <cdk/nodes/Sequence.h>

#include <cdk/nodes/expressions/Integer.h>
#include <cdk/nodes/expressions/Double.h>
#include <cdk/nodes/expressions/String.h>
#include <cdk/nodes/expressions/Identifier.h>
#include <cdk/nodes/expressions/NEG.h>
#include <cdk/nodes/expressions/ADD.h>
#include <cdk/nodes/expressions/SUB.h>
#include <cdk/nodes/expressions/MUL.h>
#include <cdk/nodes/expressions/DIV.h>
#include <cdk/nodes/expressions/MOD.h>
#include <cdk/nodes/expressions/LT.h>
#include <cdk/nodes/expressions/GT.h>
#include <cdk/nodes/expressions/GE.h>
#include <cdk/nodes/expressions/LE.h>
#include <cdk/nodes/expressions/NE.h>
#include <cdk/nodes/expressions/EQ.h>

//---------------------------------------------------------------------------
//     THESE ARE THE NODES DEFINED SPECIFICALLY FOR THIS APPLICATION
//---------------------------------------------------------------------------

#include "nodes/ForNodeDec.h"
#include "nodes/BreakNode.h"
#include "nodes/ContinueNode.h"
#include "nodes/FunctionDefineNode.h"
#include "nodes/IfElseNode.h"
#include "nodes/DoWhileNode.h"
#include "nodes/PrintNode.h"
#include "nodes/QualifierNode.h"
#include "nodes/VarDeclareNode.h"
#include "nodes/ForNodeInc.h"
#include "nodes/ReturnNode.h"
#include "nodes/expression/FunctionCallNode.h"
#include "nodes/expression/Invocation.h"
#include "nodes/expression/LeftValue.h"
#include "nodes/expression/VectorNode.h"
#include "nodes/expression/DEC.h"
#include "nodes/expression/AssignmentNode.h"
#include "nodes/expression/NOT.h"
#include "nodes/expression/LeftValueAsterisco.h"
#include "nodes/expression/AND.h"
#include "nodes/expression/MemAloc.h"
#include "nodes/expression/ReferenceNode.h"
#include "nodes/expression/INC.h"
#include "nodes/expression/OR.h"
#include "nodes/expression/Index.h"
#include "nodes/expression/ReadNode.h"
#include "nodes/IfNode.h"
#include "nodes/FunctionDeclareNode.h"
#include "nodes/BlockNode.h"
#include "nodes/VarDefineNode.h"


//---------------------------------------------------------------------------
//     A L I A S E S
//---------------------------------------------------------------------------

// make sure the "semantics" namespace is known
namespace mayfly { namespace semantics {} }

//---------------------------------------------------------------------------
//     T H E    E N D
//---------------------------------------------------------------------------

#endif /* !defined(__AUTOMATIC_NODE_ALLNODES_H__) */

#endif /* !defined(__NODE_DECLARATIONS_ONLY__) */
