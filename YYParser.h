// $Id: YYParser.h,v 1.1 2013-02-16 16:10:14 ist13500 Exp $ -*- c++ -*-
#ifndef __MF_PARSER_H__
#define __MF_PARSER_H__

#include <iostream>
#include <cdk/Compiler.h>
#include <cdk/Parser.h>
#include "MFScanner.h"

namespace mayfly {

  /**
   * This class corresponds to the parser as implemented by the pair
   * Flex+BYACC. Together, they scan the input and build the syntax
   * tree.
   * @see cdk::Parser
   * @see cdk::Compiler
   */
  class YYParser: public cdk::Parser {

    cdk::Compiler *_compiler = nullptr;

    //! @var _scanner is a global reference to the scanner (used to (re)set i/o streams)
    FlexLexer *_scanner;

  public:
    /**
     * Constructor: the constructor does the same as the superclass'
     * @param name compiler name
     * @param scanner the lexical analyser
     */
    inline YYParser() :
        cdk::Parser(), _scanner(new MFScanner(nullptr, nullptr)) {
    }

  public:
    inline FlexLexer *scanner() {
      return _scanner;
    }
    inline void scanner(FlexLexer *scanner) {
      _scanner = scanner;
      switchStreams();
    }

    /**
     * Update the scanner's input and output streams.
     */
    void switchStreams() {
      _scanner->switch_streams(&istream(), &ostream());
    }

  public:
    int parse(cdk::Compiler *compiler) {
      _compiler = compiler;
      return yyparse();
    }

    void yyerror(const char * const s) const {
      std::cerr << _scanner->lineno() << ": " << s << std::endl;
    }

    /**
     * Scanner.
     */
    int yylex() {
      return _scanner->yylex();
    }

    /**
     * This is the main parsing function.
     * It is automatically generated by 'byacc'
     */
    int yyparse();

  };

} // namespace mayfly

#endif

// $Log: YYParser.h,v $
// Revision 1.1  2013-02-16 16:10:14  ist13500
// This is a base mayfly version.
// This is just Compact with the names changed.
//
// Revision 1.3  2013/02/12 17:43:58  david
// Further code simplification (evaluators).
//
// Revision 1.2  2013/02/11 20:56:27  david
// Minor cleanup.
//
// Revision 1.1  2013/02/10 19:20:04  david
// Code cleanup and simplification. C++11 is now mandatory.
//
// Revision 1.6  2013/02/09 18:57:47  david
// New Mayfly version (this one is to be built against CDK8).
// Major code simplification. Starting transition to C++11.
//
// Revision 1.5  2012/04/10 19:09:47  david
// Major cleanup (comments).
// Better handling of ProgramNodes (visitors and not evaluators).
//
